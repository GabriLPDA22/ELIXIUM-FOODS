// src/services/tutorialService.ts
import { driver } from 'driver.js'
import 'driver.js/dist/driver.css'

export interface TutorialStep {
  element: string
  popover: {
    title: string
    description: string
    side?: 'left' | 'right' | 'top' | 'bottom'
    align?: 'start' | 'center' | 'end'
  }
}

export interface TutorialConfig {
  steps: TutorialStep[]
  options?: {
    animate?: boolean
    smoothScroll?: boolean
    allowClose?: boolean
    doneBtnText?: string
    closeBtnText?: string
    nextBtnText?: string
    prevBtnText?: string
  }
}

export const tutorialService = {
  // Configuraci√≥n de tours disponibles
  tours: {
    // Tutorial principal de la aplicaci√≥n
    mainApp: {
      steps: [
        {
          element: '[data-tour="search-bar"]',
          popover: {
            title: 'üîç ¬°Encuentra tu comida ideal!',
            description: 'Escribe aqu√≠ el nombre de un restaurante, tipo de cocina o tu plato favorito. ¬°Es s√∫per f√°cil!',
            side: 'bottom',
            align: 'center'
          }
        },
        {
          element: '[data-tour="categories"]',
          popover: {
            title: 'üçï Explora por categor√≠as',
            description: '¬øNo sabes qu√© pedir? Navega por nuestras categor√≠as: pizza, sushi, hamburguesas, postres y mucho m√°s.',
            side: 'bottom'
          }
        },
        {
          element: '[data-tour="popular-restaurants"]',
          popover: {
            title: '‚≠ê Los m√°s populares',
            description: 'Estos son los restaurantes favoritos de otros usuarios. ¬°Perfectos para empezar!',
            side: 'top'
          }
        },
        {
          element: '[data-tour="cart-button"]',
          popover: {
            title: 'üõí Tu carrito de compras',
            description: 'Aqu√≠ aparecer√°n todos los productos que vayas a√±adiendo. El n√∫mero muestra cu√°ntos tienes.',
            side: 'left'
          }
        },
        {
          element: '[data-tour="user-menu"]',
          popover: {
            title: 'üë§ Tu zona personal',
            description: 'Desde aqu√≠ puedes ver tu perfil, direcciones, historial de pedidos y repetir tus favoritos.',
            side: 'left'
          }
        }
      ],
      options: {
        animate: true,
        smoothScroll: true,
        allowClose: true,
        doneBtnText: '¬°Perfecto, ya entend√≠! üéâ',
        closeBtnText: 'Salir',
        nextBtnText: 'Siguiente ‚ú®',
        prevBtnText: '‚Üê Anterior'
      }
    } as TutorialConfig,

    // Tutorial para la p√°gina de restaurante
    restaurant: {
      steps: [
        {
          element: '[data-tour="restaurant-info"]',
          popover: {
            title: 'üè™ Informaci√≥n del Restaurante',
            description: 'Aqu√≠ puedes ver la informaci√≥n del restaurante: calificaciones, tiempo de entrega y costo de env√≠o.',
            side: 'bottom'
          }
        },
        {
          element: '[data-tour="menu-categories"]',
          popover: {
            title: 'üìã Categor√≠as del Men√∫',
            description: 'Navega por las diferentes categor√≠as del men√∫ para encontrar lo que buscas.',
            side: 'right'
          }
        },
        {
          element: '[data-tour="add-to-cart"]',
          popover: {
            title: '‚ûï A√±adir al Carrito',
            description: 'Haz clic en estos botones para a√±adir productos a tu pedido. Puedes ajustar la cantidad antes de a√±adir.',
            side: 'top'
          }
        }
      ],
      options: {
        animate: true,
        smoothScroll: true,
        allowClose: true,
        doneBtnText: '¬°Perfecto! üçΩÔ∏è',
        closeBtnText: 'Cerrar',
        nextBtnText: 'Siguiente ‚Üí',
        prevBtnText: '‚Üê Anterior'
      }
    } as TutorialConfig,

    // Tutorial para el proceso de checkout
    checkout: {
      steps: [
        {
          element: '[data-tour="delivery-address"]',
          popover: {
            title: 'üìç Direcci√≥n de Entrega',
            description: 'Selecciona o a√±ade una nueva direcci√≥n donde quieres recibir tu pedido.',
            side: 'bottom'
          }
        },
        {
          element: '[data-tour="payment-method"]',
          popover: {
            title: 'üí≥ M√©todo de Pago',
            description: 'Elige tu m√©todo de pago preferido: tarjeta, PayPal o efectivo contra entrega.',
            side: 'top'
          }
        },
        {
          element: '[data-tour="order-summary"]',
          popover: {
            title: 'üìÑ Resumen del Pedido',
            description: 'Revisa tu pedido, cantidades y el total antes de confirmar la compra.',
            side: 'left'
          }
        }
      ],
      options: {
        animate: true,
        smoothScroll: true,
        allowClose: true,
        doneBtnText: '¬°Listo para pedir! üöÄ',
        closeBtnText: 'Cerrar',
        nextBtnText: 'Siguiente ‚Üí',
        prevBtnText: '‚Üê Anterior'
      }
    } as TutorialConfig
  },

  // Iniciar un tour espec√≠fico
  startTour(tourName: keyof typeof this.tours, onComplete?: () => void) {
    const tourConfig = this.tours[tourName]

    if (!tourConfig) {
      console.warn(`Tutorial "${tourName}" no encontrado`)
      return
    }

    // Verificar que todos los elementos existan antes de iniciar
    const missingElements = tourConfig.steps.filter(step => {
      return !document.querySelector(step.element)
    })

    if (missingElements.length > 0) {
      console.warn('Algunos elementos del tutorial no est√°n disponibles:', missingElements.map(s => s.element))
      // Filtrar pasos con elementos faltantes
      tourConfig.steps = tourConfig.steps.filter(step =>
        document.querySelector(step.element)
      )
    }

    if (tourConfig.steps.length === 0) {
      console.warn('No hay pasos v√°lidos para mostrar en este tutorial')
      return
    }

    const driverObj = driver({
      showProgress: true,
      progressText: 'Paso {{current}} de {{total}}',
      ...tourConfig.options,
      steps: tourConfig.steps,
      onDestroyed: () => {
        if (onComplete) {
          onComplete()
        }
      }
    })

    driverObj.drive()
    return driverObj
  },

  // Highlight de un elemento espec√≠fico
  highlightElement(selector: string, options?: {
    title?: string
    description?: string
    showButtons?: boolean
  }) {
    const element = document.querySelector(selector)

    if (!element) {
      console.warn(`Elemento "${selector}" no encontrado para highlight`)
      return
    }

    const driverObj = driver({
      animate: true,
      showButtons: options?.showButtons ?? false,
      allowClose: true,
      popover: options ? {
        title: options.title || '',
        description: options.description || ''
      } : undefined
    })

    driverObj.highlight({
      element: selector,
      popover: options ? {
        title: options.title || '',
        description: options.description || ''
      } : undefined
    })

    return driverObj
  },

  // Verificar si elementos est√°n disponibles
  areElementsAvailable(tourName: keyof typeof this.tours): boolean {
    const tourConfig = this.tours[tourName]
    if (!tourConfig) return false

    return tourConfig.steps.every(step =>
      document.querySelector(step.element) !== null
    )
  },

  // Esperar a que los elementos est√©n disponibles
  async waitForElements(selectors: string[], timeout = 5000): Promise<boolean> {
    const startTime = Date.now()

    while (Date.now() - startTime < timeout) {
      const allElementsExist = selectors.every(selector =>
        document.querySelector(selector) !== null
      )

      if (allElementsExist) {
        return true
      }

      // Esperar 100ms antes de verificar nuevamente
      await new Promise(resolve => setTimeout(resolve, 100))
    }

    return false
  },

  // Obtener elementos disponibles para un tour
  getAvailableSteps(tourName: keyof typeof this.tours) {
    const tourConfig = this.tours[tourName]
    if (!tourConfig) return []

    return tourConfig.steps.filter(step =>
      document.querySelector(step.element) !== null
    )
  }
}

export default tutorialService
